!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/e852ee0e/
ASSIGN	y.tab.c	/^    ASSIGN = 274,$/;"	e	enum:yytokentype	file:
ASSIGN	y.tab.c	/^#define ASSIGN /;"	d	file:
ASSIGN	y.tab.h	/^    ASSIGN = 274,$/;"	e	enum:yytokentype
ASSIGN	y.tab.h	/^#define ASSIGN /;"	d
AssignK	globals.h	/^typedef enum {OpK,ConstK,IdK,AssignK,ParenK,CallK} ExpKind;$/;"	e	enum:__anonc826279f0403
AssignK	yacc/globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	e	enum:__anon35b5476e0203
BUFLEN	scan.c	/^#define BUFLEN /;"	d	file:
Boolean	globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	e	enum:__anonc826279f0503
Boolean	yacc/globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	e	enum:__anon35b5476e0403
BucketList	symtab.c	/^   } * BucketList;$/;"	t	typeref:struct:BucketListRec *	file:
BucketListRec	symtab.c	/^typedef struct BucketListRec$/;"	s	file:
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS =$/;"	m
COMMA	y.tab.c	/^    COMMA = 282,$/;"	e	enum:yytokentype	file:
COMMA	y.tab.c	/^#define COMMA /;"	d	file:
COMMA	y.tab.h	/^    COMMA = 282,$/;"	e	enum:yytokentype
COMMA	y.tab.h	/^#define COMMA /;"	d
CallK	globals.h	/^typedef enum {OpK,ConstK,IdK,AssignK,ParenK,CallK} ExpKind;$/;"	e	enum:__anonc826279f0403
CmpndK	globals.h	/^typedef enum {IfK,WhileK,ExpSK,CmpndK,RetK} StmtKind;$/;"	e	enum:__anonc826279f0303
ConstK	globals.h	/^typedef enum {OpK,ConstK,IdK,AssignK,ParenK,CallK} ExpKind;$/;"	e	enum:__anonc826279f0403
ConstK	yacc/globals.h	/^typedef enum {OpK,ConstK,IdK} ExpKind;$/;"	e	enum:__anon35b5476e0303
DADDR_SIZE	tm.c	/^#define   DADDR_SIZE /;"	d	file:
DONE	scan.c	/^   { START,INEQ,INCOMMENT,INNUM,INID,DONE,INLT,INGT,INNE,INOVER,INCOMMENT_ }$/;"	e	enum:__anon1b56c9fb0103	file:
DclK	globals.h	/^typedef enum {DclK,StmtK,ExpK} NodeKind;$/;"	e	enum:__anonc826279f0103
DclKind	globals.h	/^typedef enum {VdclK,FdclK,TypeK} DclKind;$/;"	t	typeref:enum:__anonc826279f0203
ELSE	y.tab.c	/^    ELSE = 259,$/;"	e	enum:yytokentype	file:
ELSE	y.tab.c	/^#define ELSE /;"	d	file:
ELSE	y.tab.h	/^    ELSE = 259,$/;"	e	enum:yytokentype
ELSE	y.tab.h	/^#define ELSE /;"	d
ENDFILE	globals.h	/^#define ENDFILE /;"	d
ENDFILE	yacc/globals.h	/^#define ENDFILE /;"	d
EOF_flag	scan.c	/^static int EOF_flag = FALSE; \/* corrects ungetNextChar behavior on EOF *\/$/;"	v	typeref:typename:int	file:
EQ	y.tab.c	/^    EQ = 268,$/;"	e	enum:yytokentype	file:
EQ	y.tab.c	/^#define EQ /;"	d	file:
EQ	y.tab.h	/^    EQ = 268,$/;"	e	enum:yytokentype
EQ	y.tab.h	/^#define EQ /;"	d
ERROR	y.tab.c	/^    ERROR = 285,$/;"	e	enum:yytokentype	file:
ERROR	y.tab.c	/^#define ERROR /;"	d	file:
ERROR	y.tab.h	/^    ERROR = 285,$/;"	e	enum:yytokentype
ERROR	y.tab.h	/^#define ERROR /;"	d
EXIT_SUCCESS	y.tab.c	/^#      define EXIT_SUCCESS /;"	d	file:
EXIT_SUCCESS	y.tab.c	/^#    define EXIT_SUCCESS /;"	d	file:
EchoSource	main.c	/^int EchoSource = FALSE;$/;"	v	typeref:typename:int
Error	main.c	/^int Error = FALSE;$/;"	v	typeref:typename:int
ExpK	globals.h	/^typedef enum {DclK,StmtK,ExpK} NodeKind;$/;"	e	enum:__anonc826279f0103
ExpK	yacc/globals.h	/^typedef enum {StmtK,ExpK} NodeKind;$/;"	e	enum:__anon35b5476e0103
ExpKind	globals.h	/^typedef enum {OpK,ConstK,IdK,AssignK,ParenK,CallK} ExpKind;$/;"	t	typeref:enum:__anonc826279f0403
ExpKind	yacc/globals.h	/^typedef enum {OpK,ConstK,IdK} ExpKind;$/;"	t	typeref:enum:__anon35b5476e0303
ExpSK	globals.h	/^typedef enum {IfK,WhileK,ExpSK,CmpndK,RetK} StmtKind;$/;"	e	enum:__anonc826279f0303
ExpType	globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	t	typeref:enum:__anonc826279f0503
ExpType	yacc/globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	t	typeref:enum:__anon35b5476e0403
FALSE	globals.h	/^#define FALSE /;"	d
FALSE	tm.c	/^#define FALSE /;"	d	file:
FALSE	yacc/globals.h	/^#define FALSE /;"	d
FdclK	globals.h	/^typedef enum {VdclK,FdclK,TypeK} DclKind;$/;"	e	enum:__anonc826279f0203
GE	y.tab.c	/^    GE = 273,$/;"	e	enum:yytokentype	file:
GE	y.tab.c	/^#define GE /;"	d	file:
GE	y.tab.h	/^    GE = 273,$/;"	e	enum:yytokentype
GE	y.tab.h	/^#define GE /;"	d
GT	y.tab.c	/^    GT = 272,$/;"	e	enum:yytokentype	file:
GT	y.tab.c	/^#define GT /;"	d	file:
GT	y.tab.h	/^    GT = 272,$/;"	e	enum:yytokentype
GT	y.tab.h	/^#define GT /;"	d
IADDR_SIZE	tm.c	/^#define   IADDR_SIZE /;"	d	file:
ID	y.tab.c	/^    ID = 283,$/;"	e	enum:yytokentype	file:
ID	y.tab.c	/^#define ID /;"	d	file:
ID	y.tab.h	/^    ID = 283,$/;"	e	enum:yytokentype
ID	y.tab.h	/^#define ID /;"	d
IF	y.tab.c	/^    IF = 258,$/;"	e	enum:yytokentype	file:
IF	y.tab.c	/^#define IF /;"	d	file:
IF	y.tab.h	/^    IF = 258,$/;"	e	enum:yytokentype
IF	y.tab.h	/^#define IF /;"	d
IFX	y.tab.c	/^    IFX = 286$/;"	e	enum:yytokentype	file:
IFX	y.tab.c	/^#define IFX /;"	d	file:
IFX	y.tab.h	/^    IFX = 286$/;"	e	enum:yytokentype
IFX	y.tab.h	/^#define IFX /;"	d
INCOMMENT	scan.c	/^   { START,INEQ,INCOMMENT,INNUM,INID,DONE,INLT,INGT,INNE,INOVER,INCOMMENT_ }$/;"	e	enum:__anon1b56c9fb0103	file:
INCOMMENT_	scan.c	/^   { START,INEQ,INCOMMENT,INNUM,INID,DONE,INLT,INGT,INNE,INOVER,INCOMMENT_ }$/;"	e	enum:__anon1b56c9fb0103	file:
INDENT	util.c	/^#define INDENT /;"	d	file:
INEQ	scan.c	/^   { START,INEQ,INCOMMENT,INNUM,INID,DONE,INLT,INGT,INNE,INOVER,INCOMMENT_ }$/;"	e	enum:__anon1b56c9fb0103	file:
INGT	scan.c	/^   { START,INEQ,INCOMMENT,INNUM,INID,DONE,INLT,INGT,INNE,INOVER,INCOMMENT_ }$/;"	e	enum:__anon1b56c9fb0103	file:
INID	scan.c	/^   { START,INEQ,INCOMMENT,INNUM,INID,DONE,INLT,INGT,INNE,INOVER,INCOMMENT_ }$/;"	e	enum:__anon1b56c9fb0103	file:
INLT	scan.c	/^   { START,INEQ,INCOMMENT,INNUM,INID,DONE,INLT,INGT,INNE,INOVER,INCOMMENT_ }$/;"	e	enum:__anon1b56c9fb0103	file:
INNE	scan.c	/^   { START,INEQ,INCOMMENT,INNUM,INID,DONE,INLT,INGT,INNE,INOVER,INCOMMENT_ }$/;"	e	enum:__anon1b56c9fb0103	file:
INNUM	scan.c	/^   { START,INEQ,INCOMMENT,INNUM,INID,DONE,INLT,INGT,INNE,INOVER,INCOMMENT_ }$/;"	e	enum:__anon1b56c9fb0103	file:
INOVER	scan.c	/^   { START,INEQ,INCOMMENT,INNUM,INID,DONE,INLT,INGT,INNE,INOVER,INCOMMENT_ }$/;"	e	enum:__anon1b56c9fb0103	file:
INSTRUCTION	tm.c	/^   } INSTRUCTION;$/;"	t	typeref:struct:__anon7c9e81770408	file:
INT	y.tab.c	/^    INT = 262,$/;"	e	enum:yytokentype	file:
INT	y.tab.c	/^#define INT /;"	d	file:
INT	y.tab.h	/^    INT = 262,$/;"	e	enum:yytokentype
INT	y.tab.h	/^#define INT /;"	d
IdK	globals.h	/^typedef enum {OpK,ConstK,IdK,AssignK,ParenK,CallK} ExpKind;$/;"	e	enum:__anonc826279f0403
IdK	yacc/globals.h	/^typedef enum {OpK,ConstK,IdK} ExpKind;$/;"	e	enum:__anon35b5476e0303
IfK	globals.h	/^typedef enum {IfK,WhileK,ExpSK,CmpndK,RetK} StmtKind;$/;"	e	enum:__anonc826279f0303
IfK	yacc/globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	e	enum:__anon35b5476e0203
Integer	globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	e	enum:__anonc826279f0503
Integer	yacc/globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	e	enum:__anon35b5476e0403
LBRACE	y.tab.c	/^    LBRACE = 277,$/;"	e	enum:yytokentype	file:
LBRACE	y.tab.c	/^#define LBRACE /;"	d	file:
LBRACE	y.tab.h	/^    LBRACE = 277,$/;"	e	enum:yytokentype
LBRACE	y.tab.h	/^#define LBRACE /;"	d
LCURLY	y.tab.c	/^    LCURLY = 279,$/;"	e	enum:yytokentype	file:
LCURLY	y.tab.c	/^#define LCURLY /;"	d	file:
LCURLY	y.tab.h	/^    LCURLY = 279,$/;"	e	enum:yytokentype
LCURLY	y.tab.h	/^#define LCURLY /;"	d
LE	y.tab.c	/^    LE = 271,$/;"	e	enum:yytokentype	file:
LE	y.tab.c	/^#define LE /;"	d	file:
LE	y.tab.h	/^    LE = 271,$/;"	e	enum:yytokentype
LE	y.tab.h	/^#define LE /;"	d
LINESIZE	tm.c	/^#define   LINESIZE /;"	d	file:
LPAREN	y.tab.c	/^    LPAREN = 275,$/;"	e	enum:yytokentype	file:
LPAREN	y.tab.c	/^#define LPAREN /;"	d	file:
LPAREN	y.tab.h	/^    LPAREN = 275,$/;"	e	enum:yytokentype
LPAREN	y.tab.h	/^#define LPAREN /;"	d
LT	y.tab.c	/^    LT = 270,$/;"	e	enum:yytokentype	file:
LT	y.tab.c	/^#define LT /;"	d	file:
LT	y.tab.h	/^    LT = 270,$/;"	e	enum:yytokentype
LT	y.tab.h	/^#define LT /;"	d
LineList	symtab.c	/^   } * LineList;$/;"	t	typeref:struct:LineListRec *	file:
LineListRec	symtab.c	/^typedef struct LineListRec$/;"	s	file:
MAXCHILDREN	globals.h	/^#define MAXCHILDREN /;"	d
MAXCHILDREN	yacc/globals.h	/^#define MAXCHILDREN /;"	d
MAXRESERVED	globals.h	/^#define MAXRESERVED /;"	d
MAXRESERVED	yacc/globals.h	/^#define MAXRESERVED /;"	d
MAXTOKENLEN	scan.h	/^#define MAXTOKENLEN /;"	d
MINUS	y.tab.c	/^    MINUS = 265,$/;"	e	enum:yytokentype	file:
MINUS	y.tab.c	/^#define MINUS /;"	d	file:
MINUS	y.tab.h	/^    MINUS = 265,$/;"	e	enum:yytokentype
MINUS	y.tab.h	/^#define MINUS /;"	d
NE	y.tab.c	/^    NE = 269,$/;"	e	enum:yytokentype	file:
NE	y.tab.c	/^#define NE /;"	d	file:
NE	y.tab.h	/^    NE = 269,$/;"	e	enum:yytokentype
NE	y.tab.h	/^#define NE /;"	d
NO_ANALYZE	main.c	/^#define NO_ANALYZE /;"	d	file:
NO_CODE	main.c	/^#define NO_CODE /;"	d	file:
NO_PARSE	main.c	/^#define NO_PARSE /;"	d	file:
NO_REGS	tm.c	/^#define   NO_REGS /;"	d	file:
NUM	y.tab.c	/^    NUM = 284,$/;"	e	enum:yytokentype	file:
NUM	y.tab.c	/^#define NUM /;"	d	file:
NUM	y.tab.h	/^    NUM = 284,$/;"	e	enum:yytokentype
NUM	y.tab.h	/^#define NUM /;"	d
NodeKind	globals.h	/^typedef enum {DclK,StmtK,ExpK} NodeKind;$/;"	t	typeref:enum:__anonc826279f0103
NodeKind	yacc/globals.h	/^typedef enum {StmtK,ExpK} NodeKind;$/;"	t	typeref:enum:__anon35b5476e0103
OBJS	Makefile	/^OBJS = main.o util.o lex.yy.o y.tab.o symtab.o analyze.o code.o cgen.o$/;"	m
OPCLASS	tm.c	/^   } OPCLASS;$/;"	t	typeref:enum:__anon7c9e81770103	file:
OPCODE	tm.c	/^   } OPCODE;$/;"	t	typeref:enum:__anon7c9e81770203	file:
OVER	y.tab.c	/^    OVER = 267,$/;"	e	enum:yytokentype	file:
OVER	y.tab.c	/^#define OVER /;"	d	file:
OVER	y.tab.h	/^    OVER = 267,$/;"	e	enum:yytokentype
OVER	y.tab.h	/^#define OVER /;"	d
OpK	globals.h	/^typedef enum {OpK,ConstK,IdK,AssignK,ParenK,CallK} ExpKind;$/;"	e	enum:__anonc826279f0403
OpK	yacc/globals.h	/^typedef enum {OpK,ConstK,IdK} ExpKind;$/;"	e	enum:__anon35b5476e0303
PC_REG	tm.c	/^#define   PC_REG /;"	d	file:
PLUS	y.tab.c	/^    PLUS = 264,$/;"	e	enum:yytokentype	file:
PLUS	y.tab.c	/^#define PLUS /;"	d	file:
PLUS	y.tab.h	/^    PLUS = 264,$/;"	e	enum:yytokentype
PLUS	y.tab.h	/^#define PLUS /;"	d
ParenK	globals.h	/^typedef enum {OpK,ConstK,IdK,AssignK,ParenK,CallK} ExpKind;$/;"	e	enum:__anonc826279f0403
RBRACE	y.tab.c	/^    RBRACE = 278,$/;"	e	enum:yytokentype	file:
RBRACE	y.tab.c	/^#define RBRACE /;"	d	file:
RBRACE	y.tab.h	/^    RBRACE = 278,$/;"	e	enum:yytokentype
RBRACE	y.tab.h	/^#define RBRACE /;"	d
RCURLY	y.tab.c	/^    RCURLY = 280,$/;"	e	enum:yytokentype	file:
RCURLY	y.tab.c	/^#define RCURLY /;"	d	file:
RCURLY	y.tab.h	/^    RCURLY = 280,$/;"	e	enum:yytokentype
RCURLY	y.tab.h	/^#define RCURLY /;"	d
RETURN	y.tab.c	/^    RETURN = 260,$/;"	e	enum:yytokentype	file:
RETURN	y.tab.c	/^#define RETURN /;"	d	file:
RETURN	y.tab.h	/^    RETURN = 260,$/;"	e	enum:yytokentype
RETURN	y.tab.h	/^#define RETURN /;"	d
RPAREN	y.tab.c	/^    RPAREN = 276,$/;"	e	enum:yytokentype	file:
RPAREN	y.tab.c	/^#define RPAREN /;"	d	file:
RPAREN	y.tab.h	/^    RPAREN = 276,$/;"	e	enum:yytokentype
RPAREN	y.tab.h	/^#define RPAREN /;"	d
ReadK	yacc/globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	e	enum:__anon35b5476e0203
RepeatK	yacc/globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	e	enum:__anon35b5476e0203
RetK	globals.h	/^typedef enum {IfK,WhileK,ExpSK,CmpndK,RetK} StmtKind;$/;"	e	enum:__anonc826279f0303
SEMI	y.tab.c	/^    SEMI = 281,$/;"	e	enum:yytokentype	file:
SEMI	y.tab.c	/^#define SEMI /;"	d	file:
SEMI	y.tab.h	/^    SEMI = 281,$/;"	e	enum:yytokentype
SEMI	y.tab.h	/^#define SEMI /;"	d
SHIFT	symtab.c	/^#define SHIFT /;"	d	file:
SIZE	symtab.c	/^#define SIZE /;"	d	file:
START	scan.c	/^   { START,INEQ,INCOMMENT,INNUM,INID,DONE,INLT,INGT,INNE,INOVER,INCOMMENT_ }$/;"	e	enum:__anon1b56c9fb0103	file:
STEPRESULT	tm.c	/^   } STEPRESULT;$/;"	t	typeref:enum:__anon7c9e81770303	file:
StateType	scan.c	/^   StateType;$/;"	t	typeref:enum:__anon1b56c9fb0103	file:
StmtK	globals.h	/^typedef enum {DclK,StmtK,ExpK} NodeKind;$/;"	e	enum:__anonc826279f0103
StmtK	yacc/globals.h	/^typedef enum {StmtK,ExpK} NodeKind;$/;"	e	enum:__anon35b5476e0103
StmtKind	globals.h	/^typedef enum {IfK,WhileK,ExpSK,CmpndK,RetK} StmtKind;$/;"	t	typeref:enum:__anonc826279f0303
StmtKind	yacc/globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	t	typeref:enum:__anon35b5476e0203
TIMES	y.tab.c	/^    TIMES = 266,$/;"	e	enum:yytokentype	file:
TIMES	y.tab.c	/^#define TIMES /;"	d	file:
TIMES	y.tab.h	/^    TIMES = 266,$/;"	e	enum:yytokentype
TIMES	y.tab.h	/^#define TIMES /;"	d
TRUE	globals.h	/^#define TRUE /;"	d
TRUE	tm.c	/^#define TRUE /;"	d	file:
TRUE	yacc/globals.h	/^#define TRUE /;"	d
TokenType	globals.h	/^typedef int TokenType; $/;"	t	typeref:typename:int
TokenType	yacc/globals.h	/^typedef int TokenType; $/;"	t	typeref:typename:int
TraceAnalyze	main.c	/^int TraceAnalyze = FALSE;$/;"	v	typeref:typename:int
TraceCode	main.c	/^int TraceCode = FALSE;$/;"	v	typeref:typename:int
TraceParse	main.c	/^int TraceParse = TRUE;$/;"	v	typeref:typename:int
TraceScan	main.c	/^int TraceScan = FALSE;$/;"	v	typeref:typename:int
TreeNode	globals.h	/^   } TreeNode;$/;"	t	typeref:struct:treeNode
TreeNode	yacc/globals.h	/^   } TreeNode;$/;"	t	typeref:struct:treeNode
TypeK	globals.h	/^typedef enum {VdclK,FdclK,TypeK} DclKind;$/;"	e	enum:__anonc826279f0203
UNINDENT	util.c	/^#define UNINDENT /;"	d	file:
VOID	y.tab.c	/^    VOID = 263,$/;"	e	enum:yytokentype	file:
VOID	y.tab.c	/^#define VOID /;"	d	file:
VOID	y.tab.h	/^    VOID = 263,$/;"	e	enum:yytokentype
VOID	y.tab.h	/^#define VOID /;"	d
VdclK	globals.h	/^typedef enum {VdclK,FdclK,TypeK} DclKind;$/;"	e	enum:__anonc826279f0203
Void	globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	e	enum:__anonc826279f0503
Void	yacc/globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	e	enum:__anon35b5476e0403
WHILE	y.tab.c	/^    WHILE = 261,$/;"	e	enum:yytokentype	file:
WHILE	y.tab.c	/^#define WHILE /;"	d	file:
WHILE	y.tab.h	/^    WHILE = 261,$/;"	e	enum:yytokentype
WHILE	y.tab.h	/^#define WHILE /;"	d
WORDSIZE	tm.c	/^#define   WORDSIZE /;"	d	file:
WhileK	globals.h	/^typedef enum {IfK,WhileK,ExpSK,CmpndK,RetK} StmtKind;$/;"	e	enum:__anonc826279f0303
WriteK	yacc/globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	e	enum:__anon35b5476e0203
YYABORT	y.tab.c	/^#define YYABORT /;"	d	file:
YYACCEPT	y.tab.c	/^#define YYACCEPT /;"	d	file:
YYBACKUP	y.tab.c	/^#define YYBACKUP(/;"	d	file:
YYBISON	y.tab.c	/^#define YYBISON /;"	d	file:
YYBISON_VERSION	y.tab.c	/^#define YYBISON_VERSION /;"	d	file:
YYCASE_	y.tab.c	/^# define YYCASE_(/;"	d	file:
YYCOPY	y.tab.c	/^#   define YYCOPY(/;"	d	file:
YYCOPY_NEEDED	y.tab.c	/^# define YYCOPY_NEEDED /;"	d	file:
YYDEBUG	y.tab.c	/^# define YYDEBUG /;"	d	file:
YYDEBUG	y.tab.h	/^# define YYDEBUG /;"	d
YYDPRINTF	y.tab.c	/^# define YYDPRINTF(/;"	d	file:
YYEMPTY	y.tab.c	/^#define YYEMPTY /;"	d	file:
YYEOF	y.tab.c	/^#define YYEOF /;"	d	file:
YYERRCODE	y.tab.c	/^#define YYERRCODE /;"	d	file:
YYERROR	y.tab.c	/^#define YYERROR /;"	d	file:
YYERROR_VERBOSE	y.tab.c	/^# define YYERROR_VERBOSE /;"	d	file:
YYERROR_VERBOSE_ARGS_MAXIMUM	y.tab.c	/^  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };$/;"	e	enum:yysyntax_error::__anond9bd93f40103	file:
YYFINAL	y.tab.c	/^#define YYFINAL /;"	d	file:
YYFPRINTF	y.tab.c	/^#  define YYFPRINTF /;"	d	file:
YYFREE	y.tab.c	/^#   define YYFREE /;"	d	file:
YYINITDEPTH	y.tab.c	/^# define YYINITDEPTH /;"	d	file:
YYLAST	y.tab.c	/^#define YYLAST /;"	d	file:
YYMALLOC	y.tab.c	/^#   define YYMALLOC /;"	d	file:
YYMAXDEPTH	y.tab.c	/^# define YYMAXDEPTH /;"	d	file:
YYMAXUTOK	y.tab.c	/^#define YYMAXUTOK /;"	d	file:
YYNNTS	y.tab.c	/^#define YYNNTS /;"	d	file:
YYNRULES	y.tab.c	/^#define YYNRULES /;"	d	file:
YYNSTATES	y.tab.c	/^#define YYNSTATES /;"	d	file:
YYNTOKENS	y.tab.c	/^#define YYNTOKENS /;"	d	file:
YYPACT_NINF	y.tab.c	/^#define YYPACT_NINF /;"	d	file:
YYPARSER	y.tab.c	/^#define YYPARSER /;"	d	file:
YYPOPSTACK	y.tab.c	/^#define YYPOPSTACK(/;"	d	file:
YYPTRDIFF_MAXIMUM	y.tab.c	/^#  define YYPTRDIFF_MAXIMUM /;"	d	file:
YYPTRDIFF_T	y.tab.c	/^#  define YYPTRDIFF_T /;"	d	file:
YYPULL	y.tab.c	/^#define YYPULL /;"	d	file:
YYPURE	y.tab.c	/^#define YYPURE /;"	d	file:
YYPUSH	y.tab.c	/^#define YYPUSH /;"	d	file:
YYRECOVERING	y.tab.c	/^#define YYRECOVERING(/;"	d	file:
YYSIZEOF	y.tab.c	/^#define YYSIZEOF(/;"	d	file:
YYSIZE_MAXIMUM	y.tab.c	/^#define YYSIZE_MAXIMUM /;"	d	file:
YYSIZE_T	y.tab.c	/^#  define YYSIZE_T /;"	d	file:
YYSKELETON_NAME	y.tab.c	/^#define YYSKELETON_NAME /;"	d	file:
YYSTACK_ALLOC	y.tab.c	/^#    define YYSTACK_ALLOC /;"	d	file:
YYSTACK_ALLOC	y.tab.c	/^#  define YYSTACK_ALLOC /;"	d	file:
YYSTACK_ALLOC_MAXIMUM	y.tab.c	/^#   define YYSTACK_ALLOC_MAXIMUM /;"	d	file:
YYSTACK_BYTES	y.tab.c	/^# define YYSTACK_BYTES(/;"	d	file:
YYSTACK_FREE	y.tab.c	/^#  define YYSTACK_FREE /;"	d	file:
YYSTACK_FREE	y.tab.c	/^#  define YYSTACK_FREE(/;"	d	file:
YYSTACK_GAP_MAXIMUM	y.tab.c	/^# define YYSTACK_GAP_MAXIMUM /;"	d	file:
YYSTACK_RELOCATE	y.tab.c	/^# define YYSTACK_RELOCATE(/;"	d	file:
YYSTYPE	y.tab.c	/^#define YYSTYPE /;"	d	file:
YYSTYPE	y.tab.c	/^typedef int YYSTYPE;$/;"	t	typeref:typename:int	file:
YYSTYPE	y.tab.h	/^typedef int YYSTYPE;$/;"	t	typeref:typename:int
YYSTYPE_IS_DECLARED	y.tab.c	/^# define YYSTYPE_IS_DECLARED /;"	d	file:
YYSTYPE_IS_DECLARED	y.tab.h	/^# define YYSTYPE_IS_DECLARED /;"	d
YYSTYPE_IS_TRIVIAL	y.tab.c	/^# define YYSTYPE_IS_TRIVIAL /;"	d	file:
YYSTYPE_IS_TRIVIAL	y.tab.h	/^# define YYSTYPE_IS_TRIVIAL /;"	d
YYSYNTAX_ERROR	y.tab.c	/^# define YYSYNTAX_ERROR /;"	d	file:
YYTABLE_NINF	y.tab.c	/^#define YYTABLE_NINF /;"	d	file:
YYTERROR	y.tab.c	/^#define YYTERROR /;"	d	file:
YYTOKENTYPE	y.tab.c	/^# define YYTOKENTYPE$/;"	d	file:
YYTOKENTYPE	y.tab.h	/^# define YYTOKENTYPE$/;"	d
YYTRANSLATE	y.tab.c	/^#define YYTRANSLATE(/;"	d	file:
YYUNDEFTOK	y.tab.c	/^#define YYUNDEFTOK /;"	d	file:
YYUSE	y.tab.c	/^# define YYUSE(/;"	d	file:
YY_	y.tab.c	/^#   define YY_(/;"	d	file:
YY_	y.tab.c	/^#  define YY_(/;"	d	file:
YY_ASSERT	y.tab.c	/^#define YY_ASSERT(/;"	d	file:
YY_ATTRIBUTE_PURE	y.tab.c	/^#  define YY_ATTRIBUTE_PURE /;"	d	file:
YY_ATTRIBUTE_PURE	y.tab.c	/^#  define YY_ATTRIBUTE_PURE$/;"	d	file:
YY_ATTRIBUTE_UNUSED	y.tab.c	/^#  define YY_ATTRIBUTE_UNUSED /;"	d	file:
YY_ATTRIBUTE_UNUSED	y.tab.c	/^#  define YY_ATTRIBUTE_UNUSED$/;"	d	file:
YY_CAST	y.tab.c	/^#   define YY_CAST(/;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	y.tab.c	/^# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN /;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	y.tab.c	/^# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN$/;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	y.tab.c	/^# define YY_IGNORE_MAYBE_UNINITIALIZED_END /;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	y.tab.c	/^# define YY_IGNORE_MAYBE_UNINITIALIZED_END$/;"	d	file:
YY_IGNORE_USELESS_CAST_BEGIN	y.tab.c	/^# define YY_IGNORE_USELESS_CAST_BEGIN /;"	d	file:
YY_IGNORE_USELESS_CAST_BEGIN	y.tab.c	/^# define YY_IGNORE_USELESS_CAST_BEGIN$/;"	d	file:
YY_IGNORE_USELESS_CAST_END	y.tab.c	/^# define YY_IGNORE_USELESS_CAST_END /;"	d	file:
YY_IGNORE_USELESS_CAST_END	y.tab.c	/^# define YY_IGNORE_USELESS_CAST_END$/;"	d	file:
YY_INITIAL_VALUE	y.tab.c	/^# define YY_INITIAL_VALUE(/;"	d	file:
YY_LOCATION_PRINT	y.tab.c	/^# define YY_LOCATION_PRINT(/;"	d	file:
YY_NULLPTR	y.tab.c	/^#    define YY_NULLPTR /;"	d	file:
YY_NULLPTR	y.tab.c	/^#   define YY_NULLPTR /;"	d	file:
YY_REDUCE_PRINT	y.tab.c	/^# define YY_REDUCE_PRINT(/;"	d	file:
YY_REINTERPRET_CAST	y.tab.c	/^#   define YY_REINTERPRET_CAST(/;"	d	file:
YY_STACK_PRINT	y.tab.c	/^# define YY_STACK_PRINT(/;"	d	file:
YY_STDINT_H	y.tab.c	/^#  define YY_STDINT_H$/;"	d	file:
YY_SYMBOL_PRINT	y.tab.c	/^# define YY_SYMBOL_PRINT(/;"	d	file:
YY_YY_Y_TAB_H_INCLUDED	y.tab.h	/^# define YY_YY_Y_TAB_H_INCLUDED$/;"	d
_ANALYZE_H_	analyze.h	/^#define _ANALYZE_H_$/;"	d
_CGEN_H_	cgen.h	/^#define _CGEN_H_$/;"	d
_CODE_H_	code.h	/^#define _CODE_H_$/;"	d
_GLOBALS_H_	globals.h	/^#define _GLOBALS_H_$/;"	d
_GLOBALS_H_	yacc/globals.h	/^#define _GLOBALS_H_$/;"	d
_PARSE_H_	parse.h	/^#define _PARSE_H_$/;"	d
_SCAN_H_	scan.h	/^#define _SCAN_H_$/;"	d
_SYMTAB_H_	symtab.h	/^#define _SYMTAB_H_$/;"	d
_UTIL_H_	util.h	/^#define _UTIL_H_$/;"	d
__anon1b56c9fb0103	scan.c	/^   { START,INEQ,INCOMMENT,INNUM,INID,DONE,INLT,INGT,INNE,INOVER,INCOMMENT_ }$/;"	g	file:
__anon1b56c9fb0208	scan.c	/^    { char* str;$/;"	s	file:
__anon35b5476e0103	yacc/globals.h	/^typedef enum {StmtK,ExpK} NodeKind;$/;"	g
__anon35b5476e0203	yacc/globals.h	/^typedef enum {IfK,RepeatK,AssignK,ReadK,WriteK} StmtKind;$/;"	g
__anon35b5476e0303	yacc/globals.h	/^typedef enum {OpK,ConstK,IdK} ExpKind;$/;"	g
__anon35b5476e0403	yacc/globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	g
__anon35b5476e050a	yacc/globals.h	/^     union { StmtKind stmt; ExpKind exp;} kind;$/;"	u	struct:treeNode
__anon35b5476e060a	yacc/globals.h	/^     union { TokenType op;$/;"	u	struct:treeNode
__anon7c9e81770103	tm.c	/^typedef enum {$/;"	g	file:
__anon7c9e81770203	tm.c	/^typedef enum {$/;"	g	file:
__anon7c9e81770303	tm.c	/^typedef enum {$/;"	g	file:
__anon7c9e81770408	tm.c	/^typedef struct {$/;"	s	file:
__anonc826279f0103	globals.h	/^typedef enum {DclK,StmtK,ExpK} NodeKind;$/;"	g
__anonc826279f0203	globals.h	/^typedef enum {VdclK,FdclK,TypeK} DclKind;$/;"	g
__anonc826279f0303	globals.h	/^typedef enum {IfK,WhileK,ExpSK,CmpndK,RetK} StmtKind;$/;"	g
__anonc826279f0403	globals.h	/^typedef enum {OpK,ConstK,IdK,AssignK,ParenK,CallK} ExpKind;$/;"	g
__anonc826279f0503	globals.h	/^typedef enum {Void,Integer,Boolean} ExpType;$/;"	g
__anonc826279f060a	globals.h	/^     union { DclKind dcl; StmtKind stmt; ExpKind exp;} kind;$/;"	u	struct:treeNode
__anonc826279f070a	globals.h	/^     union { TokenType op;$/;"	u	struct:treeNode
__anond9bd93f40103	y.tab.c	/^  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };$/;"	g	function:yysyntax_error	file:
ac	code.h	/^#define  ac /;"	d
ac1	code.h	/^#define  ac1 /;"	d
addop	cminus.y	/^addop		: PLUS | MINUS $/;"	l
addt_exp	cminus.y	/^addt_exp	: addt_exp addop term$/;"	l
all	Makefile	/^all: cminus$/;"	t
alloca	y.tab.c	/^#    define alloca /;"	d	file:
analyze.o	Makefile	/^analyze.o: analyze.c globals.h y.tab.h symtab.h analyze.h$/;"	t
arg_list	cminus.y	/^arg_list	: arg_list COMMA exp$/;"	l
args	cminus.y	/^args		: arg_list { $$ = $1; }$/;"	l
arr_dcl	cminus.y	/^arr_dcl		: prim_dcl LBRACE NUM { savedVal = atoi(tokenString); } RBRACE {$/;"	l
arr_size	globals.h	/^	 int arr_size;$/;"	m	struct:treeNode	typeref:typename:int
assert	y.tab.c	/^static void assert(YYSTYPE v, int k)$/;"	f	typeref:typename:void	file:
assign_stmt	cminus2.y	/^assign_stmt : ID { savedName = copyString(tokenString);$/;"	l
assign_stmt	parse.c	/^TreeNode * assign_stmt(void)$/;"	f	typeref:typename:TreeNode *
assign_stmt	yacc/tiny.y	/^assign_stmt : ID { savedName = copyString(tokenString);$/;"	l
atEOL	tm.c	/^int atEOL(void)$/;"	f	typeref:typename:int
attr	globals.h	/^             char * name; } attr;$/;"	m	struct:treeNode	typeref:union:treeNode::__anonc826279f070a
attr	yacc/globals.h	/^             char * name; } attr;$/;"	m	struct:treeNode	typeref:union:treeNode::__anon35b5476e060a
bufsize	scan.c	/^static int bufsize = 0; \/* current size of buffer string *\/$/;"	v	typeref:typename:int	file:
buildSymtab	analyze.c	/^void buildSymtab(TreeNode * syntaxTree)$/;"	f	typeref:typename:void
cGen	cgen.c	/^static void cGen( TreeNode * tree)$/;"	f	typeref:typename:void	file:
call	cminus.y	/^call		: ID { savedName = copyString(tokenString);$/;"	l
cgen.o	Makefile	/^cgen.o: cgen.c globals.h y.tab.h symtab.h code.h cgen.h$/;"	t
ch	tm.c	/^char ch  ;$/;"	v	typeref:typename:char
checkNode	analyze.c	/^static void checkNode(TreeNode * t)$/;"	f	typeref:typename:void	file:
child	globals.h	/^   { struct treeNode * child[MAXCHILDREN];$/;"	m	struct:treeNode	typeref:struct:treeNode * []
child	yacc/globals.h	/^   { struct treeNode * child[MAXCHILDREN];$/;"	m	struct:treeNode	typeref:struct:treeNode * []
clean	Makefile	/^clean:$/;"	t
cminus	Makefile	/^cminus: $(OBJS)$/;"	t
cmpnd_stmt	cminus.y	/^cmpnd_stmt	: LCURLY local_dcls stmt_list RCURLY$/;"	l
code	main.c	/^FILE * code;$/;"	v	typeref:typename:FILE *
code.o	Makefile	/^code.o: code.c code.h globals.h y.tab.h$/;"	t
codeGen	cgen.c	/^void codeGen(TreeNode * syntaxTree, char * codefile)$/;"	f	typeref:typename:void
copyString	util.c	/^char * copyString(char * s)$/;"	f	typeref:typename:char *
dMem	tm.c	/^int dMem [DADDR_SIZE];$/;"	v	typeref:typename:int[]
dcl	cminus.y	/^dcl			: var_dcl { $$ = $1; }$/;"	l
dcl	globals.h	/^     union { DclKind dcl; StmtKind stmt; ExpKind exp;} kind;$/;"	m	union:treeNode::__anonc826279f060a	typeref:typename:DclKind
dcl_list	cminus.y	/^dcl_list	: dcl_list dcl$/;"	l
dloc	tm.c	/^int dloc = 0 ;$/;"	v	typeref:typename:int
doCommand	tm.c	/^int doCommand (void)$/;"	f	typeref:typename:int
done	tm.c	/^int done  ;$/;"	v	typeref:typename:int
emitBackup	code.c	/^void emitBackup( int loc)$/;"	f	typeref:typename:void
emitComment	code.c	/^void emitComment( char * c )$/;"	f	typeref:typename:void
emitLoc	code.c	/^static int emitLoc = 0 ;$/;"	v	typeref:typename:int	file:
emitRM	code.c	/^void emitRM( char * op, int r, int d, int s, char *c)$/;"	f	typeref:typename:void
emitRM_Abs	code.c	/^void emitRM_Abs( char *op, int r, int a, char * c)$/;"	f	typeref:typename:void
emitRO	code.c	/^void emitRO( char *op, int r, int s, int t, char *c)$/;"	f	typeref:typename:void
emitRestore	code.c	/^void emitRestore(void)$/;"	f	typeref:typename:void
emitSkip	code.c	/^int emitSkip( int howMany)$/;"	f	typeref:typename:int
error	tm.c	/^int error( char * msg, int lineNo, int instNo)$/;"	f	typeref:typename:int
exp	cminus.y	/^exp			: var ASSIGN exp$/;"	l
exp	cminus2.y	/^exp         : simple_exp LT simple_exp $/;"	l
exp	globals.h	/^     union { DclKind dcl; StmtKind stmt; ExpKind exp;} kind;$/;"	m	union:treeNode::__anonc826279f060a	typeref:typename:ExpKind
exp	parse.c	/^TreeNode * exp(void)$/;"	f	typeref:typename:TreeNode *
exp	yacc/globals.h	/^     union { StmtKind stmt; ExpKind exp;} kind;$/;"	m	union:treeNode::__anon35b5476e050a	typeref:typename:ExpKind
exp	yacc/tiny.y	/^exp         : simple_exp LT simple_exp $/;"	l
exp_stmt	cminus.y	/^exp_stmt	: exp SEMI { $$ = $1; }$/;"	l
factor	cminus.y	/^factor		: LPAREN exp RPAREN$/;"	l
factor	cminus2.y	/^factor      : LPAREN exp RPAREN$/;"	l
factor	parse.c	/^TreeNode * factor(void)$/;"	f	typeref:typename:TreeNode *
factor	yacc/tiny.y	/^factor      : LPAREN exp RPAREN$/;"	l
fun_dcl	cminus.y	/^fun_dcl		: type_spec ID { savedName = copyString(tokenString); }$/;"	l
genExp	cgen.c	/^static void genExp( TreeNode * tree)$/;"	f	typeref:typename:void	file:
genStmt	cgen.c	/^static void genStmt( TreeNode * tree)$/;"	f	typeref:typename:void	file:
getCh	tm.c	/^void getCh (void)$/;"	f	typeref:typename:void
getNextChar	scan.c	/^static int getNextChar(void)$/;"	f	typeref:typename:int	file:
getNum	tm.c	/^int getNum (void)$/;"	f	typeref:typename:int
getToken	scan.c	/^TokenType getToken(void)$/;"	f	typeref:typename:TokenType
getWord	tm.c	/^int getWord (void)$/;"	f	typeref:typename:int
gp	code.h	/^#define gp /;"	d
hash	symtab.c	/^static int hash ( char * key )$/;"	f	typeref:typename:int	file:
hashTable	symtab.c	/^static BucketList hashTable[SIZE];$/;"	v	typeref:typename:BucketList[]	file:
highEmitLoc	code.c	/^static int highEmitLoc = 0;$/;"	v	typeref:typename:int	file:
iMem	tm.c	/^INSTRUCTION iMem [IADDR_SIZE];$/;"	v	typeref:typename:INSTRUCTION[]
iarg1	tm.c	/^      int iarg1  ;$/;"	m	struct:__anon7c9e81770408	typeref:typename:int	file:
iarg2	tm.c	/^      int iarg2  ;$/;"	m	struct:__anon7c9e81770408	typeref:typename:int	file:
iarg3	tm.c	/^      int iarg3  ;$/;"	m	struct:__anon7c9e81770408	typeref:typename:int	file:
icountflag	tm.c	/^int icountflag = FALSE;$/;"	v	typeref:typename:int
if_stmt	cminus2.y	/^if_stmt     : IF exp THEN stmt_seq END$/;"	l
if_stmt	parse.c	/^TreeNode * if_stmt(void)$/;"	f	typeref:typename:TreeNode *
if_stmt	yacc/tiny.y	/^if_stmt     : IF exp THEN stmt_seq END$/;"	l
iloc	tm.c	/^int iloc = 0 ;$/;"	v	typeref:typename:int
inCol	tm.c	/^int inCol  ;$/;"	v	typeref:typename:int
in_Line	tm.c	/^char in_Line[LINESIZE] ;$/;"	v	typeref:typename:char[]
insertNode	analyze.c	/^static void insertNode( TreeNode * t)$/;"	f	typeref:typename:void	file:
iop	tm.c	/^      int iop  ;$/;"	m	struct:__anon7c9e81770408	typeref:typename:int	file:
is_param	globals.h	/^	 int is_param;$/;"	m	struct:treeNode	typeref:typename:int
iter_stmt	cminus.y	/^iter_stmt	: WHILE LPAREN exp RPAREN stmt$/;"	l
kind	globals.h	/^     union { DclKind dcl; StmtKind stmt; ExpKind exp;} kind;$/;"	m	struct:treeNode	typeref:union:treeNode::__anonc826279f060a
kind	yacc/globals.h	/^     union { StmtKind stmt; ExpKind exp;} kind;$/;"	m	struct:treeNode	typeref:union:treeNode::__anon35b5476e050a
lex.yy.c	Makefile	/^lex.yy.c: cminus.l$/;"	t
lex.yy.o	Makefile	/^lex.yy.o: lex.yy.c globals.h y.tab.h util.h scan.h$/;"	t
lineBuf	scan.c	/^static char lineBuf[BUFLEN]; \/* holds the current line *\/$/;"	v	typeref:typename:char[]	file:
lineLen	tm.c	/^int lineLen ;$/;"	v	typeref:typename:int
lineno	globals.h	/^     int lineno;$/;"	m	struct:treeNode	typeref:typename:int
lineno	main.c	/^int lineno = 0;$/;"	v	typeref:typename:int
lineno	symtab.c	/^   { int lineno;$/;"	m	struct:LineListRec	typeref:typename:int	file:
lineno	yacc/globals.h	/^     int lineno;$/;"	m	struct:treeNode	typeref:typename:int
linepos	scan.c	/^static int linepos = 0; \/* current position in LineBuf *\/$/;"	v	typeref:typename:int	file:
lines	symtab.c	/^     LineList lines;$/;"	m	struct:BucketListRec	typeref:typename:LineList	file:
listing	main.c	/^FILE * listing;$/;"	v	typeref:typename:FILE *
local_dcls	cminus.y	/^local_dcls	: local_dcls var_dcl$/;"	l
location	analyze.c	/^static int location = 0;$/;"	v	typeref:typename:int	file:
main	main.c	/^main( int argc, char * argv[] )$/;"	f
main	tm.c	/^main( int argc, char * argv[] )$/;"	f
main.o	Makefile	/^main.o: main.c globals.h y.tab.h util.h parse.h analyze.h cgen.h$/;"	t
match	parse.c	/^static void match(TokenType expected)$/;"	f	typeref:typename:void	file:
memloc	symtab.c	/^     int memloc ; \/* memory location for variable *\/$/;"	m	struct:BucketListRec	typeref:typename:int	file:
mp	code.h	/^#define  mp /;"	d
mulop	cminus.y	/^mulop		: TIMES | OVER$/;"	l
name	globals.h	/^             char * name; } attr;$/;"	m	union:treeNode::__anonc826279f070a	typeref:typename:char *
name	symtab.c	/^   { char * name;$/;"	m	struct:BucketListRec	typeref:typename:char *	file:
name	yacc/globals.h	/^             char * name; } attr;$/;"	m	union:treeNode::__anon35b5476e060a	typeref:typename:char *
newDclNode	util.c	/^TreeNode * newDclNode(DclKind kind)$/;"	f	typeref:typename:TreeNode *
newExpNode	util.c	/^TreeNode * newExpNode(ExpKind kind)$/;"	f	typeref:typename:TreeNode *
newStmtNode	util.c	/^TreeNode * newStmtNode(StmtKind kind)$/;"	f	typeref:typename:TreeNode *
newTypeNode	util.c	/^TreeNode * newTypeNode(DclKind kind, ExpType et)$/;"	f	typeref:typename:TreeNode *
next	symtab.c	/^     struct BucketListRec * next;$/;"	m	struct:BucketListRec	typeref:struct:BucketListRec *	file:
next	symtab.c	/^     struct LineListRec * next;$/;"	m	struct:LineListRec	typeref:struct:LineListRec *	file:
nodekind	globals.h	/^     NodeKind nodekind;$/;"	m	struct:treeNode	typeref:typename:NodeKind
nodekind	yacc/globals.h	/^     NodeKind nodekind;$/;"	m	struct:treeNode	typeref:typename:NodeKind
nonBlank	tm.c	/^int nonBlank (void)$/;"	f	typeref:typename:int
nullProc	analyze.c	/^static void nullProc(TreeNode * t)$/;"	f	typeref:typename:void	file:
num	tm.c	/^int num  ;$/;"	v	typeref:typename:int
nv_dcl	cminus.y	/^nv_dcl		: prim_dcl {$$=$1;}$/;"	l
op	globals.h	/^     union { TokenType op;$/;"	m	union:treeNode::__anonc826279f070a	typeref:typename:TokenType
op	yacc/globals.h	/^     union { TokenType op;$/;"	m	union:treeNode::__anon35b5476e060a	typeref:typename:TokenType
opADD	tm.c	/^   opADD,    \/* RR     reg(r) = reg(s)+reg(t) *\/$/;"	e	enum:__anon7c9e81770203	file:
opClass	tm.c	/^int opClass( int c )$/;"	f	typeref:typename:int
opCodeTab	tm.c	/^char * opCodeTab[]$/;"	v	typeref:typename:char * []
opDIV	tm.c	/^   opDIV,    \/* RR     reg(r) = reg(s)\/reg(t) *\/$/;"	e	enum:__anon7c9e81770203	file:
opHALT	tm.c	/^   opHALT,    \/* RR     halt, operands are ignored *\/$/;"	e	enum:__anon7c9e81770203	file:
opIN	tm.c	/^   opIN,      \/* RR     read into reg(r); s and t are ignored *\/$/;"	e	enum:__anon7c9e81770203	file:
opJEQ	tm.c	/^   opJEQ,     \/* RA     if reg(r)==0 then reg(7) = d+reg(s) *\/$/;"	e	enum:__anon7c9e81770203	file:
opJGE	tm.c	/^   opJGE,     \/* RA     if reg(r)>=0 then reg(7) = d+reg(s) *\/$/;"	e	enum:__anon7c9e81770203	file:
opJGT	tm.c	/^   opJGT,     \/* RA     if reg(r)>0 then reg(7) = d+reg(s) *\/$/;"	e	enum:__anon7c9e81770203	file:
opJLE	tm.c	/^   opJLE,     \/* RA     if reg(r)<=0 then reg(7) = d+reg(s) *\/$/;"	e	enum:__anon7c9e81770203	file:
opJLT	tm.c	/^   opJLT,     \/* RA     if reg(r)<0 then reg(7) = d+reg(s) *\/$/;"	e	enum:__anon7c9e81770203	file:
opJNE	tm.c	/^   opJNE,     \/* RA     if reg(r)!=0 then reg(7) = d+reg(s) *\/$/;"	e	enum:__anon7c9e81770203	file:
opLD	tm.c	/^   opLD,      \/* RM     reg(r) = mem(d+reg(s)) *\/$/;"	e	enum:__anon7c9e81770203	file:
opLDA	tm.c	/^   opLDA,     \/* RA     reg(r) = d+reg(s) *\/$/;"	e	enum:__anon7c9e81770203	file:
opLDC	tm.c	/^   opLDC,     \/* RA     reg(r) = d ; reg(s) is ignored *\/$/;"	e	enum:__anon7c9e81770203	file:
opMUL	tm.c	/^   opMUL,    \/* RR     reg(r) = reg(s)*reg(t) *\/$/;"	e	enum:__anon7c9e81770203	file:
opOUT	tm.c	/^   opOUT,     \/* RR     write from reg(r), s and t are ignored *\/$/;"	e	enum:__anon7c9e81770203	file:
opRALim	tm.c	/^   opRALim    \/* Limit of RA opcodes *\/$/;"	e	enum:__anon7c9e81770203	file:
opRMLim	tm.c	/^   opRMLim,   \/* Limit of RM opcodes *\/$/;"	e	enum:__anon7c9e81770203	file:
opRRLim	tm.c	/^   opRRLim,   \/* limit of RR opcodes *\/$/;"	e	enum:__anon7c9e81770203	file:
opST	tm.c	/^   opST,      \/* RM     mem(d+reg(s)) = reg(r) *\/$/;"	e	enum:__anon7c9e81770203	file:
opSUB	tm.c	/^   opSUB,    \/* RR     reg(r) = reg(s)-reg(t) *\/$/;"	e	enum:__anon7c9e81770203	file:
opclRA	tm.c	/^   opclRA      \/* reg r, int d+s *\/$/;"	e	enum:__anon7c9e81770103	file:
opclRM	tm.c	/^   opclRM,     \/* reg r, mem d+s *\/$/;"	e	enum:__anon7c9e81770103	file:
opclRR	tm.c	/^   opclRR,     \/* reg operands r,s,t *\/$/;"	e	enum:__anon7c9e81770103	file:
param	cminus.y	/^param		: type_spec ID$/;"	l
param_list	cminus.y	/^param_list	: param_list COMMA param$/;"	l
params	cminus.y	/^params		: param_list { $$ = $1; }$/;"	l
parse	parse.c	/^TreeNode * parse(void)$/;"	f	typeref:typename:TreeNode *
parse	y.tab.c	/^TreeNode * parse(void)$/;"	f	typeref:typename:TreeNode *
pc	code.h	/^#define  pc /;"	d
pgm	tm.c	/^FILE *pgm  ;$/;"	v	typeref:typename:FILE *
pgmName	tm.c	/^char pgmName[20];$/;"	v	typeref:typename:char[20]
prim_dcl	cminus.y	/^prim_dcl	: INT ID {$/;"	l
printSpaces	util.c	/^static void printSpaces(void)$/;"	f	typeref:typename:void	file:
printSymTab	symtab.c	/^void printSymTab(FILE * listing)$/;"	f	typeref:typename:void
printToken	util.c	/^void printToken( TokenType token, const char* tokenString )$/;"	f	typeref:typename:void
printTree	util.c	/^void printTree( TreeNode * tree )$/;"	f	typeref:typename:void
program	cminus.y	/^program     : dcl_list { savedTree = $1;} $/;"	l
program	cminus2.y	/^program     : stmt_seq$/;"	l
program	yacc/tiny.y	/^program     : stmt_seq$/;"	l
readInstructions	tm.c	/^int readInstructions (void)$/;"	f	typeref:typename:int
read_stmt	parse.c	/^TreeNode * read_stmt(void)$/;"	f	typeref:typename:TreeNode *
read_stmt	yacc/tiny.y	/^read_stmt   : READ ID$/;"	l
reg	tm.c	/^int reg [NO_REGS];$/;"	v	typeref:typename:int[]
relop	cminus.y	/^relop		: LE | LT | GT | GE | EQ | NE  $/;"	l
repeat_stmt	parse.c	/^TreeNode * repeat_stmt(void)$/;"	f	typeref:typename:TreeNode *
repeat_stmt	yacc/tiny.y	/^repeat_stmt : REPEAT stmt_seq UNTIL exp$/;"	l
reservedLookup	scan.c	/^static TokenType reservedLookup (char * s)$/;"	f	typeref:typename:TokenType	file:
reservedWords	scan.c	/^    } reservedWords[MAXRESERVED]$/;"	v	typeref:struct:__anon1b56c9fb0208[]
return_stmt	cminus.y	/^return_stmt	: RETURN SEMI$/;"	l
rmobj	Makefile	/^rmobj:$/;"	t
savedLineNo	y.tab.c	/^static int savedLineNo;  \/* ditto *\/$/;"	v	typeref:typename:int	file:
savedName	y.tab.c	/^static char * savedName; \/* for use in assignments *\/$/;"	v	typeref:typename:char *	file:
savedTree	y.tab.c	/^static TreeNode * savedTree; \/* stores syntax tree for later return *\/$/;"	v	typeref:typename:TreeNode *	file:
savedVal	y.tab.c	/^static int savedVal;$/;"	v	typeref:typename:int	file:
select_stmt	cminus.y	/^select_stmt : IF LPAREN exp RPAREN stmt $/;"	l
sibling	globals.h	/^     struct treeNode * sibling;$/;"	m	struct:treeNode	typeref:struct:treeNode *
sibling	yacc/globals.h	/^     struct treeNode * sibling;$/;"	m	struct:treeNode	typeref:struct:treeNode *
simple_exp	cminus.y	/^simple_exp	: addt_exp relop addt_exp$/;"	l
simple_exp	cminus2.y	/^simple_exp  : simple_exp PLUS term $/;"	l
simple_exp	parse.c	/^TreeNode * simple_exp(void)$/;"	f	typeref:typename:TreeNode *
simple_exp	yacc/tiny.y	/^simple_exp  : simple_exp PLUS term $/;"	l
skipCh	tm.c	/^int skipCh ( char c  )$/;"	f	typeref:typename:int
source	main.c	/^FILE * source;$/;"	v	typeref:typename:FILE *
srDMEM_ERR	tm.c	/^   srDMEM_ERR,$/;"	e	enum:__anon7c9e81770303	file:
srHALT	tm.c	/^   srHALT,$/;"	e	enum:__anon7c9e81770303	file:
srIMEM_ERR	tm.c	/^   srIMEM_ERR,$/;"	e	enum:__anon7c9e81770303	file:
srOKAY	tm.c	/^   srOKAY,$/;"	e	enum:__anon7c9e81770303	file:
srZERODIVIDE	tm.c	/^   srZERODIVIDE$/;"	e	enum:__anon7c9e81770303	file:
st_insert	symtab.c	/^void st_insert( char * name, int lineno, int loc )$/;"	f	typeref:typename:void
st_lookup	symtab.c	/^int st_lookup ( char * name )$/;"	f	typeref:typename:int
statement	parse.c	/^TreeNode * statement(void)$/;"	f	typeref:typename:TreeNode *
stepResultTab	tm.c	/^char * stepResultTab[]$/;"	v	typeref:typename:char * []
stepTM	tm.c	/^STEPRESULT stepTM (void)$/;"	f	typeref:typename:STEPRESULT
stmt	cminus.y	/^stmt        : select_stmt { $$ = $1; }$/;"	l
stmt	cminus2.y	/^stmt        : if_stmt { $$ = $1; }$/;"	l
stmt	globals.h	/^     union { DclKind dcl; StmtKind stmt; ExpKind exp;} kind;$/;"	m	union:treeNode::__anonc826279f060a	typeref:typename:StmtKind
stmt	yacc/globals.h	/^     union { StmtKind stmt; ExpKind exp;} kind;$/;"	m	union:treeNode::__anon35b5476e050a	typeref:typename:StmtKind
stmt	yacc/tiny.y	/^stmt        : if_stmt { $$ = $1; }$/;"	l
stmt_list	cminus.y	/^stmt_list   : stmt_list_ { $$ = $1; }	$/;"	l
stmt_list_	cminus.y	/^stmt_list_	: stmt_list_ stmt$/;"	l
stmt_seq	cminus2.y	/^stmt_seq    : stmt_seq SEMI stmt$/;"	l
stmt_seq	yacc/tiny.y	/^stmt_seq    : stmt_seq SEMI stmt$/;"	l
stmt_sequence	parse.c	/^TreeNode * stmt_sequence(void)$/;"	f	typeref:typename:TreeNode *
str	scan.c	/^    { char* str;$/;"	m	struct:__anon1b56c9fb0208	typeref:typename:char *	file:
symtab.o	Makefile	/^symtab.o: symtab.c symtab.h$/;"	t
syntaxError	parse.c	/^static void syntaxError(char * message)$/;"	f	typeref:typename:void	file:
term	cminus.y	/^term		: term mulop factor$/;"	l
term	cminus2.y	/^term        : term TIMES factor $/;"	l
term	parse.c	/^TreeNode * term(void)$/;"	f	typeref:typename:TreeNode *
term	yacc/tiny.y	/^term        : term TIMES factor $/;"	l
tmpOffset	cgen.c	/^static int tmpOffset = 0;$/;"	v	typeref:typename:int	file:
tok	scan.c	/^      TokenType tok;$/;"	m	struct:__anon1b56c9fb0208	typeref:typename:TokenType	file:
token	parse.c	/^static TokenType token; \/* holds current token *\/$/;"	v	typeref:typename:TokenType	file:
tokenString	scan.c	/^char tokenString[MAXTOKENLEN+1];$/;"	v	typeref:typename:char[]
traceflag	tm.c	/^int traceflag = FALSE;$/;"	v	typeref:typename:int
traverse	analyze.c	/^static void traverse( TreeNode * t,$/;"	f	typeref:typename:void	file:
treeNode	globals.h	/^typedef struct treeNode$/;"	s
treeNode	yacc/globals.h	/^typedef struct treeNode$/;"	s
type	globals.h	/^     ExpType type; \/* for type checking of exps *\/$/;"	m	struct:treeNode	typeref:typename:ExpType
type	yacc/globals.h	/^     ExpType type; \/* for type checking of exps *\/$/;"	m	struct:treeNode	typeref:typename:ExpType
typeCheck	analyze.c	/^void typeCheck(TreeNode * syntaxTree)$/;"	f	typeref:typename:void
typeError	analyze.c	/^static void typeError(TreeNode * t, char * message)$/;"	f	typeref:typename:void	file:
type_spec	cminus.y	/^type_spec	: INT | VOID$/;"	l
ungetNextChar	scan.c	/^static void ungetNextChar(void)$/;"	f	typeref:typename:void	file:
util.o	Makefile	/^util.o: util.c util.h globals.h y.tab.h$/;"	t
val	globals.h	/^             int val;$/;"	m	union:treeNode::__anonc826279f070a	typeref:typename:int
val	yacc/globals.h	/^             int val;$/;"	m	union:treeNode::__anon35b5476e060a	typeref:typename:int
var	cminus.y	/^var			: ID $/;"	l
var_dcl	cminus.y	/^var_dcl		: nv_dcl SEMI | arr_dcl SEMI;$/;"	l
word	tm.c	/^char word[WORDSIZE] ;$/;"	v	typeref:typename:char[]
writeInstruction	tm.c	/^void writeInstruction ( int loc )$/;"	f	typeref:typename:void
write_stmt	parse.c	/^TreeNode * write_stmt(void)$/;"	f	typeref:typename:TreeNode *
write_stmt	yacc/tiny.y	/^write_stmt  : WRITE exp$/;"	l
y.tab.c	Makefile	/^y.tab.c: cminus.y$/;"	t
y.tab.h	Makefile	/^y.tab.h: y.tab.c$/;"	t
y.tab.o	Makefile	/^y.tab.o: y.tab.c globals.h y.tab.h util.h scan.h parse.h$/;"	t
yy_reduce_print	y.tab.c	/^yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, int yyrule)$/;"	f	typeref:typename:void	file:
yy_stack_print	y.tab.c	/^yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)$/;"	f	typeref:typename:void	file:
yy_state_fast_t	y.tab.c	/^typedef int yy_state_fast_t;$/;"	t	typeref:typename:int	file:
yy_state_t	y.tab.c	/^typedef yytype_int8 yy_state_t;$/;"	t	typeref:typename:yytype_int8	file:
yy_symbol_print	y.tab.c	/^yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	typeref:typename:void	file:
yy_symbol_value_print	y.tab.c	/^yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	typeref:typename:void	file:
yyalloc	y.tab.c	/^union yyalloc$/;"	u	file:
yychar	y.tab.c	/^int yychar;$/;"	v	typeref:typename:int
yycheck	y.tab.c	/^static const yytype_int8 yycheck[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yyclearin	y.tab.c	/^#define yyclearin /;"	d	file:
yydebug	y.tab.c	/^int yydebug;$/;"	v	typeref:typename:int
yydefact	y.tab.c	/^static const yytype_int8 yydefact[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yydefgoto	y.tab.c	/^static const yytype_int8 yydefgoto[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yydestruct	y.tab.c	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	typeref:typename:void	file:
yyerrok	y.tab.c	/^#define yyerrok /;"	d	file:
yyerror	y.tab.c	/^int yyerror(char * message)$/;"	f	typeref:typename:int
yylex	y.tab.c	/^static int yylex(void)$/;"	f	typeref:typename:int	file:
yylval	y.tab.c	/^YYSTYPE yylval;$/;"	v	typeref:typename:YYSTYPE
yynerrs	y.tab.c	/^int yynerrs;$/;"	v	typeref:typename:int
yypact	y.tab.c	/^static const yytype_int8 yypact[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yypact_value_is_default	y.tab.c	/^#define yypact_value_is_default(/;"	d	file:
yyparse	y.tab.c	/^yyparse (void)$/;"	f	typeref:typename:int
yypgoto	y.tab.c	/^static const yytype_int8 yypgoto[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yyr1	y.tab.c	/^static const yytype_int8 yyr1[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yyr2	y.tab.c	/^static const yytype_int8 yyr2[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yyrline	y.tab.c	/^static const yytype_int16 yyrline[] =$/;"	v	typeref:typename:const yytype_int16[]	file:
yyss_alloc	y.tab.c	/^  yy_state_t yyss_alloc;$/;"	m	union:yyalloc	typeref:typename:yy_state_t	file:
yystos	y.tab.c	/^static const yytype_int8 yystos[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yystpcpy	y.tab.c	/^#   define yystpcpy /;"	d	file:
yystpcpy	y.tab.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	typeref:typename:char *	file:
yystrlen	y.tab.c	/^#   define yystrlen(/;"	d	file:
yystrlen	y.tab.c	/^yystrlen (const char *yystr)$/;"	f	typeref:typename:YYPTRDIFF_T	file:
yysyntax_error	y.tab.c	/^yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,$/;"	f	typeref:typename:int	file:
yytable	y.tab.c	/^static const yytype_int8 yytable[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yytable_value_is_error	y.tab.c	/^#define yytable_value_is_error(/;"	d	file:
yytname	y.tab.c	/^static const char *const yytname[] =$/;"	v	typeref:typename:const char * const[]	file:
yytnamerr	y.tab.c	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	typeref:typename:YYPTRDIFF_T	file:
yytokentype	y.tab.c	/^  enum yytokentype$/;"	g	file:
yytokentype	y.tab.h	/^  enum yytokentype$/;"	g
yytoknum	y.tab.c	/^static const yytype_int16 yytoknum[] =$/;"	v	typeref:typename:const yytype_int16[]	file:
yytranslate	y.tab.c	/^static const yytype_int8 yytranslate[] =$/;"	v	typeref:typename:const yytype_int8[]	file:
yytype_int16	y.tab.c	/^typedef __INT_LEAST16_TYPE__ yytype_int16;$/;"	t	typeref:typename:__INT_LEAST16_TYPE__	file:
yytype_int16	y.tab.c	/^typedef int_least16_t yytype_int16;$/;"	t	typeref:typename:int_least16_t	file:
yytype_int16	y.tab.c	/^typedef short yytype_int16;$/;"	t	typeref:typename:short	file:
yytype_int8	y.tab.c	/^typedef __INT_LEAST8_TYPE__ yytype_int8;$/;"	t	typeref:typename:__INT_LEAST8_TYPE__	file:
yytype_int8	y.tab.c	/^typedef int_least8_t yytype_int8;$/;"	t	typeref:typename:int_least8_t	file:
yytype_int8	y.tab.c	/^typedef signed char yytype_int8;$/;"	t	typeref:typename:signed char	file:
yytype_uint16	y.tab.c	/^typedef __UINT_LEAST16_TYPE__ yytype_uint16;$/;"	t	typeref:typename:__UINT_LEAST16_TYPE__	file:
yytype_uint16	y.tab.c	/^typedef int yytype_uint16;$/;"	t	typeref:typename:int	file:
yytype_uint16	y.tab.c	/^typedef uint_least16_t yytype_uint16;$/;"	t	typeref:typename:uint_least16_t	file:
yytype_uint16	y.tab.c	/^typedef unsigned short yytype_uint16;$/;"	t	typeref:typename:unsigned short	file:
yytype_uint8	y.tab.c	/^typedef __UINT_LEAST8_TYPE__ yytype_uint8;$/;"	t	typeref:typename:__UINT_LEAST8_TYPE__	file:
yytype_uint8	y.tab.c	/^typedef short yytype_uint8;$/;"	t	typeref:typename:short	file:
yytype_uint8	y.tab.c	/^typedef uint_least8_t yytype_uint8;$/;"	t	typeref:typename:uint_least8_t	file:
yytype_uint8	y.tab.c	/^typedef unsigned char yytype_uint8;$/;"	t	typeref:typename:unsigned char	file:
yyvs_alloc	y.tab.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	typeref:typename:YYSTYPE	file:
